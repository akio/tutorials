# 
msgid ""
msgstr ""
"Project-Id-Version: jvrc software 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-31 17:58+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../basics/howto-exec-simulation.rst:2
msgid "Creating a simulation project"
msgstr "シミュレーションの実行"

#: ../../basics/howto-exec-simulation.rst:8
msgid "Launch Choreonoid"
msgstr "Choreonoidの実行"

#: ../../basics/howto-exec-simulation.rst:10
msgid "Let's launch Choreonoid first. Type the following command in gnome-terminal. ::"
msgstr "まずはChoreonoidを実行します。端末を開いて以下のコマンドを実行してください。 ::"

#: ../../basics/howto-exec-simulation.rst:14
msgid "You will see a window as follows."
msgstr "以下のような画面が表示されるはずです。"

#: ../../basics/howto-exec-simulation.rst:19
msgid "Open a model file"
msgstr "モデルを開く"

#: ../../basics/howto-exec-simulation.rst:21
msgid "Create a world item named \"World\" first by selecting "File", "New" and "World" menus."
msgstr "まず、「メニュー」の「ファイル」「新規」より「ワールド」を選択し、ワールドアイテム「World」を追加します。"

#: ../../basics/howto-exec-simulation.rst:32
msgid "Add a model of the floor"
msgstr "床を追加する"

#: ../../basics/howto-exec-simulation.rst:34
msgid "To prevent the robot from falling, let's add a model of the ground."
msgstr "シミュレーションを行うために、床(地面)を追加します。"

#: ../../basics/howto-exec-simulation.rst:36
msgid "The window of Choreonoid has a tab named \"item\". This tab is called \"item view\". Select \"World\" item first in the item view. Then choose \"OpenHRP model file\" following \"File\",\"Open\" menus and select the model file for the floor. Its filename is \"/usr/share/choreonoid-1.5/model/misc/floor.wrl\"."
msgstr ""
"Choreonoid の画面にはアイテムと表示されている領域がありますが、これをアイテムビューと呼びます。 "
"まずアイテムビューで「World」を選択します。 "
"次に、「メニュー」の「ファイル」「読み込み」より「OpenHRPモデルファイル」を選択し、床のモデルファイルを開きます。ファイル名は「/usr/share/choreonoid-1.5/model/misc/floor.wrl」です。"

#: ../../basics/howto-exec-simulation.rst:41
msgid "Add a simulator item"
msgstr "シミュレータアイテムを追加する"

#: ../../basics/howto-exec-simulation.rst:43
msgid "Choose \"World\" item in the item view. Then create a \"AISTsimulator\" item by following \"File\", \"New\" menus."
msgstr ""
"アイテムビューで「World」を選択します。 "
"次に、「メニュー」の「ファイル」「新規」より「AISTシミュレータ」を選択し、AISTシミュレータ「AISTSimulator」を追加します。"

#: ../../basics/howto-exec-simulation.rst:49
#: ../../basics/rt-controller.rst:201 ../../basics/torque.rst:344
msgid "Run simulation"
msgstr "シミュレーションを実行する"

#: ../../basics/howto-exec-simulation.rst:51
msgid "Next press \"Start simulation\" button in the simulation tool bar. Simulation will start."
msgstr "次に、シミュレーションツールバーの「シミュレーション開始ボタン」を押します。 これにより、画面上でモデルのシミュレーションが開始されます。"

#: ../../basics/howto-exec-simulation.rst:55
msgid "Just after starting simulation, the robot falls down."
msgstr ""
"シミュレーションを実行すると下の画像のようにロボットはすぐに崩れ落ちてしまうはずです。 "

#: ../../basics/howto-exec-simulation.rst:64
msgid "Save a project"
msgstr "プロジェクトの保存"

#: ../../basics/howto-exec-simulation.rst:66
msgid "After running simulation, let's save the project. Choose \"Save as\" menu in \"File\" menu and name the project file."
msgstr ""
"シミュレーションの実行が終わったら、プロジェクトを保存しておきましょう。「ファイル」の「名前を付けてプロジェクトを保存」を選択し、適当なファイル名を付けて保存します。"

#: ../../basics/howto-exec-simulation.rst:69
#: ../../basics/rt-controller.rst:211 ../../basics/torque.rst:354
msgid "A sample project used in this tutorial"
msgstr "サンプルプロジェクトについて"

#: ../../basics/index.rst:2
msgid "Basic simulations"
msgstr "シミュレーションの基本"

#: ../../basics/rt-controller.rst:2
msgid "Connecting a RT component"
msgstr "RTコンポーネントのコントローラの接続"

#: ../../basics/rt-controller.rst:8 ../../basics/torque.rst:9
msgid "Open a project file"
msgstr "プロジェクトを開く"

#: ../../basics/rt-controller.rst:13
msgid "Add a controller"
msgstr "コントローラの追加"

#: ../../basics/rt-controller.rst:19 ../../basics/torque.rst:16
msgid "Source code of a controller"
msgstr "コントローラのソースコード"

#: ../../basics/rt-controller.rst:21 ../../basics/torque.rst:18
msgid ""
"コントローラのヘッダのソースコードは以下になります。Choreonoidに含まれるサンプルのSR1WalkControllerRTC.hを基にしています。"
" ::"
msgstr ""

#: ../../basics/rt-controller.rst:63
msgid ""
"`RTC::TimedDoubleSeq` というのは、時刻情報とdouble型の実際の値を持つOpenRTM固有の複合型です。 "
"SeqはOpenRTMにおける配列型のように扱います。 OpenRTMにおけるdouble[]型と考えておけばよいでしょう。"
msgstr ""

#: ../../basics/rt-controller.rst:67
msgid ""
"`RTC::InPort<RTC::TimedDoubleSeq>` はRTCの入力ポートを表す型であり、入力ポートを操作するにはこれを利用します。 "
"m_angleは入力ポートから関節角度を受けとるための変数です。m_angleInで取得した値はm_angleで参照します。"
msgstr ""

#: ../../basics/rt-controller.rst:70 ../../basics/torque.rst:75
msgid ""
"コントローラのソースコードは以下になります。Choreonoidに含まれるサンプルのSR1WalkControllerRTC.cppを基にしています。 "
"::"
msgstr ""

#: ../../basics/rt-controller.rst:163
msgid "RobotControllerRTCのコンストラクタで、 m_angleIn と m_angle を関連付けています。"
msgstr ""

#: ../../basics/rt-controller.rst:165
msgid "RTCの初期化時に呼ばれるonInitialize()で、m_angleInをRTCの入力ポートqと関連づけています。"
msgstr ""

#: ../../basics/rt-controller.rst:167
msgid ""
"onExecute()はRTCの実行中に定期的に呼ばれます。ここでは関節角度を取得し標準出力に表示する処理を行っています。 "
"m_angleIn.isNew()とは新しいデータが到着しているか確認する関数です。 "
"onExecute()の実行時にはデータが到着しているかどうかが分からないので、ここでチェックしています。新しいデータが来ていた場合にはm_angleIn.read()でデータを読み込みます。読み込んだデータは自動的にm_angleに格納され、m_angle.dataとして取得できます。"
" m_angle.dataは各関節毎に配列の値となっています。"
msgstr ""

#: ../../basics/rt-controller.rst:175
msgid "Setup the controller"
msgstr "コントローラの設定"

#: ../../basics/rt-controller.rst:177
msgid "プロジェクト上でRTコンポーネント(RTC)を作成しただけでは、ロボットの制御を行うことができません。"
msgstr ""

#: ../../basics/rt-controller.rst:179
msgid ""
"アイテムビューで「BodyRTC」を選択するとプロパティのタブ(プロパティビューと言います)にRTCの設定が表示されます。 "
"プロパティビューの「コントローラのモジュール名」を「RobotControllerRTC」とします。これは「コントローラのビルド」で作成したモジュールのパスと対応しています。"
" さらに、プロパティビューの「自動ポート接続」を true にします。"
msgstr ""

#: ../../basics/rt-controller.rst:186 ../../basics/torque.rst:330
msgid "Build the controller"
msgstr "コントローラのビルド"

#: ../../basics/rt-controller.rst:194 ../../basics/torque.rst:338
msgid "その後、次のコマンドを実行します。 ::"
msgstr ""

#: ../../basics/rt-controller.rst:198
msgid ""
"Choreonoidでは読み込むRTCコントローラのモジュールはChoreonoidのインストール先の共有ディレクトリ(/usr/lib/choreonoid-1.5/rtc)に配置しなければなりません。\"make"
" install\"ではこの処理を自動的に行ってくれます。"
msgstr ""

#: ../../basics/rt-controller.rst:203
msgid ""
"シミュレーションツールバーの「シミュレーション開始ボタン」を押します。 "
"シミュレーションを実行するとchoreonoidを実行している端末に関節角度(m_angle)の値が表示されるはずです。"
msgstr ""

#: ../../basics/rt-controller.rst:208
msgid "このようにして得られる関節角度を基にトルクをロボットに入力することでロボットの制御を行うことができます。この後のサンプルで詳しく解説します。"
msgstr ""

#: ../../basics/torque.rst:2
msgid "Joint control using a RT component"
msgstr "RTコンポーネントにおけるトルク指令の入力"

#: ../../basics/torque.rst:5
msgid "ここでは、トルク指令を出力するようにRTコンポーネントを拡張し、ロボットが直立を 維持できるようにします。"
msgstr ""

#: ../../basics/torque.rst:72
msgid ""
"今回はトルクの出力をしなければならないので、出力ポートのための設定が増加しています。 "
"`RTC::OutPort<RTC::TimedDoubleSeq>` はRTCの出力ポートを表す型であり、出力ポートを操作するにはこれを利用します。"
msgstr ""

#: ../../basics/torque.rst:247
msgid "出力ポートに関する設定は、入力ポートの場合と関数名が異なるだけでよく似ています。"
msgstr ""

#: ../../basics/torque.rst:254
msgid ""
"onExecute()ではトルクの計算と出力の処理が追加されました。 関節角度を読み込む部分のコードはこれまでと同じですが、 "
"`m_torque.data[i]` に計算したトルクの値を代入しています。 ここでは簡単なPD制御によりトルクの値を求めています。 "
"各関節毎のPgainとDgainはソースコードの先頭付近に固定値で定義されています。 ロボットがうまく制御できない場合はこの値を調整する必要があります。"
" `m_torque.data` にセットした値は `m_torqueOut.write()` により実際のロボットの制御トルクとして出力されます。 "
"出力ポートは値をセットするだけなので入力ポートよりも簡単です。"
msgstr ""

#: ../../basics/torque.rst:267
msgid ""
"アイテムビューで「BodyRTC」を選択し、プロパティビューの「コントローラのモジュール名」を「RobotTorqueControllerRTC」とします。これは「コントローラのビルド」で作成したモジュールのパスと対応しています。"
" さらに、プロパティビューの「自動ポート接続」を true にします。"
msgstr ""

#: ../../basics/torque.rst:277
msgid "タイムバーの設定画面を開きます。"
msgstr ""

#: ../../basics/torque.rst:281
msgid "「内部フレームレート」の項目を下記のように「1000」に設定します。"
msgstr ""

#: ../../basics/torque.rst:285
msgid "このフレームレートは1秒間に何回実行するかを表しています。 これが1000で1ミリ秒の間隔となり、100で10ミリ秒間隔となります。"
msgstr ""

#: ../../basics/torque.rst:289
msgid "Create a pose sequence item"
msgstr "ポーズ列の追加"

#: ../../basics/torque.rst:291
msgid ""
"まずアイテムビューで「JVRC」を選択します。 "
"次に、「メニュー」の「ファイル」「新規」より「ポーズ列」を選択し「SampleMotion」という名前で追加します。"
msgstr ""

#: ../../basics/torque.rst:296
msgid "次に、「表示」の「ビューの表示」から「ポーズロール」を選択します。次の画面が表示されるはずです。"
msgstr ""

#: ../../basics/torque.rst:300
msgid "基準の姿勢を作るため、アイテムビューで「JVRC」を選択し、ツールバーにある「選択ボディを初期姿勢に」のボタンを押します。"
msgstr ""

#: ../../basics/torque.rst:304
msgid "ポーズロールにおいて、1.0 を選択して「挿入」を押します。 同様に 2.0, 3.0, 4.0 を選択して「挿入」を押します。"
msgstr ""

#: ../../basics/torque.rst:307
msgid "ポーズロールは次のようになるはずです。"
msgstr ""

#: ../../basics/torque.rst:311
msgid "あとはこれを繰り返し、15.0まで生成します。"
msgstr ""

#: ../../basics/torque.rst:313
msgid ""
"ポーズロールで作成したのはキーフレームと呼びます。これより、プログラムで使用するモーションを生成させます。 "
"ツールバーから「ボディモーションの生成」ボタンを押します。"
msgstr ""

#: ../../basics/torque.rst:318
msgid ""
"モーションはツールバーのボタンで手動で生成しなくても、キーフレームの更新時に自動生成することができます。 "
"これを有効にするにはツールバーの「自動更新モード」のボタンをオンにしてください。"
msgstr ""

#: ../../basics/torque.rst:323
msgid "SampleMotion の子供に motion があるので、これを選択し名前を付けて保存ボタンを押します。"
msgstr ""

#: ../../basics/index.rst:4
msgid "This chapter explains how to setup the simulation world and run basic simulations using a JVRC-1 model as an example."
msgstr "この章ではJVRCモデルファイルを用いた基本的なシミュレーションの実行方法について解説します。"

#: ../../basics/howto-exec-simulation.rst:5
msgid "This section explains how to create and run a simple simulation."
msgstr "この節ではサンプルシミュレーションの実行方法について解説します。"

#: ../../basics/howto-exec-simulation.rst:25
msgid "When you check the checkbox named \"JVRC\", JVRC-1 will be displayed in the scene view as follows."
msgstr ""
"モデルを読み込んだだけではロボットは表示されません。 「アイテム」と書かれたリストのJVRC-1にチェックを入れてください。 "
"すると、以下のようにロボットが表示されるはずです。"

#: ../../basics/howto-exec-simulation.rst:60
msgid "Because all joints are not controlled but free. We will control joints in the next section to keep the standing position."
msgstr "これは全く関節の制御をしていないためです。 これからロボットを制御するプログラムを記述し、ロボットが崩れ落ちないようにしていきます。"

#: ../../basics/torque.rst:249
msgid ""
"onActivated() のときの処理に注目しましょう。この関数はRTCが有効化された際に一度だけ呼ばれます。 "
"ここで、Choreonoidの共有ディレクトリからRobotPattern.yamlを読み出しています。 "
"これはロボットの全関節角度の軌道を記述した動作パターンファイルです。 `motion.loadStandardYAMLformat()` "
"によりモーションデータに変換します。 onActivated()では初期値の設定も行っています。"
msgstr ""

#: ../../basics/torque.rst:273
msgid "Create a pose sequence"
msgstr "シミュレーション用動作パターンの作成"

#: ../../basics/torque.rst:275
msgid ""
"ロボットの関節の制御を行うRTコンポーネントの実行周期に合わせて、ロボットの動作パターンを生成するための設定を行います。RTコンポーネントは1[ms]周期で実行されるので、Choreonoidの内部フレームレートを1000に設定します。"
msgstr ""

#: ../../basics/rt-controller.rst:5
msgid "ここではJVRC-1のモデルにRTコンポーネントのコントローラを接続し、ロボットの関節角度を取得できるようにします。"
msgstr ""

#: ../../basics/rt-controller.rst:15
msgid ""
"まずアイテムビューで「JVRC-1」を選択します。 "
"次に、「メニュー」の「ファイル」「新規」より「BodyRTC」を選択し「BodyRTC」という名前で追加します。"
msgstr ""

#: ../../basics/torque.rst:346
msgid ""
"シミュレーションツールバーの「シミュレーション開始ボタン」を押します。 "
"シミュレーションを実行すると今度はなかなかロボットが崩れ落ちず、シミュレーション時間で15秒間の間立ったままの状態になったはずです。 "
"これは、JVRCの制御を行うためのモーションデータが15秒分しか用意していないためです。"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:23
msgid "Then load a model file of JVRC-1 by choosing \"OpenHRP model file\" followed by \"File\", \"Open\" menus. The filename is samles/tutorials/JVRC-1/main.wrl."
msgstr ""
"そのまま「メニュー」の「ファイル」「読み込み」より「OpenHRPモデルファイル」を選択し、JVRC-"
"1のモデルファイルを読み込みます。ファイル名はsamples/tutorials/JVRC-1/main.wrlです。"

#: ../../basics/howto-exec-simulation.rst:71
msgid "You can find a sample project file created by this tutorial in samples/tutorials/cnoid/sample1.cnoid."
msgstr ""
"このサンプルのプロジェクトファイルは「サンプルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample1.cnoid」に保存されています。"

#: ../../basics/rt-controller.rst:10
msgid ""
"「メニュー」の「プロジェクトの読み込み」からJVRC-"
"1用のプロジェクトファイルを読み込みます。プロジェクトファイル名は「サンプルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample1.cnoid」です。"
msgstr ""

#: ../../basics/rt-controller.rst:172
msgid ""
"これらのソースコードは「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/rtc/RobotControllerRTC.cpp」と「samples/tutorials/rtc/RobotControllerRTC.h」に保存されています。"
msgstr ""

#: ../../basics/rt-controller.rst:188 ../../basics/torque.rst:332
msgid ""
"「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/rtc/」ディレクトリに移動し、次のコマンドを実行します。"
" ::"
msgstr ""

#: ../../basics/rt-controller.rst:192
msgid ""
"これにより、「samples/tutorials/rtc/」ディレクトリに「RobotControllerRTC.so」というファイルが作成されるはずです。"
msgstr ""

#: ../../basics/torque.rst:262
msgid ""
"これらのソースコードは "
"「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/rtc/RobotTorqueControllerRTC.cpp」と"
" 「samples/tutorials/rtc/RobotTorqueControllerRTC.h」に保存されています。"
msgstr ""

#: ../../basics/torque.rst:327
msgid ""
"「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/rtc/」ディレクトリに「RobotMotion.yaml」というファイルで保存します。"
msgstr ""

#: ../../basics/torque.rst:336
msgid ""
"これにより、「samples/tutorials/rtc/」ディレクトリに「RobotTorqueControllerRTC.so」というファイルが作成されるはずです。"
msgstr ""

#: ../../basics/rt-controller.rst:213
msgid ""
"このサンプルのプロジェクトファイルは「サンプルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample2.cnoid」に保存されています。"
msgstr ""

#: ../../basics/torque.rst:11
msgid ""
"「メニュー」の「プロジェクトの読み込み」から JVRC モデルファイル用のプロジェク "
"トファイルを読み込みます。プロジェクトファイル名は「サンプルファイルのインス "
"トール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample2.cnoid」です。"
msgstr ""

#: ../../basics/torque.rst:356
msgid ""
"このサンプルのプロジェクトファイルは「サンプルファイルのインストール」でダウン "
"ロードしたリポジトリの「samples/tutorials/cnoid/sample3.cnoid」に保存されています。"
msgstr ""

#: ../../basics/torque.rst:265
msgid "Setup of the controller"
msgstr ""

#~ msgid "シミュレーションを実行する"
#~ msgstr ""

#~ msgid "サンプルプロジェクトについて"
#~ msgstr ""

#~ msgid "プロジェクトを開く"
#~ msgstr ""

#~ msgid "コントローラのソースコード"
#~ msgstr ""

#~ msgid "コントローラの設定"
#~ msgstr ""

#~ msgid "コントローラのビルド"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「サンプルファイルのインストール」でダウンロードしたリポジトリの「samples/cnoid/sample2.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」から JVRC モデルファイル用のプロジェク "
#~ "トファイルを読み込みます。プロジェクトファイル名は「サンプルファイルのインス "
#~ "トール」でダウンロードしたリポジトリの「samples/cnoid/sample2.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「サンプルファイルのインストール」でダウン "
#~ "ロードしたリポジトリの「samples/cnoid/sample3.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "これらのソースコードは「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/RTC/RobotControllerRTC.cpp」と「model/robot/RTC/RobotControllerRTC.h」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/RTC/」ディレクトリに移動し、次のコマンドを実行します。 ::"
#~ msgstr ""

#~ msgid ""
#~ "これにより、「model/robot/RTC/」ディレクトリに「RobotControllerRTC.so」というファイルが作成されるはずです。"
#~ msgstr ""

#~ msgid ""
#~ "これらのソースコードは "
#~ "「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/RTC/RobotTorqueControllerRTC.cpp」と"
#~ " 「model/robot/RTC/RobotTorqueControllerRTC.h」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/RTC/」ディレクトリに「RobotMotion.yaml」というファイルで保存します。"
#~ msgstr ""

#~ msgid ""
#~ "これにより、「model/robot/RTC/」ディレクトリに「RobotTorqueControllerRTC.so」というファイルが作成されるはずです。"
#~ msgstr ""

#~ msgid ""
#~ "そのまま「メニュー」の「ファイル」「読み込み」より「OpenHRPモデルファイル」を選択し、JVRC-"
#~ "1のモデルファイルを読み込みます。ファイル名はモデルファイルを展開したディレクトリのmain.wrlです。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/cnoid/sample1.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」からJVRC-"
#~ "1用のプロジェクトファイルを読み込みます。プロジェクトファイル名は「サンプルファイルのインストール」でダウンロードしたリポジトリの「samples/cnoid/sample1.cnoid」です。"
#~ msgstr ""

#~ msgid "ここではJVRCモデルにRTコンポーネントのコントローラを接続し、ロボットの関節角度を取得できるようにします。"
#~ msgstr ""

#~ msgid ""
#~ "まずアイテムビューで「JVRC」を選択します。 "
#~ "次に、「メニュー」の「ファイル」「新規」より「BodyRTC」を選択し「BodyRTC」という名前で追加します。"
#~ msgstr ""

#~ msgid ""
#~ "シミュレーションツールバーの「シミュレーション開始ボタン」を押します。 "
#~ "シミュレーションを実行すると今度はなかなかロボットが崩れ落ちず、シミュレーション時間で15秒間の間立ったままの状態になったはずです。 "
#~ "これは、JVRCの制御を行うためのモーションデータが15秒ぶんしか用意していないためです。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」からJVRCモデルファイル用のプロジェクトファイルを読み込みます。プロジェクトファイル名は「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/cnoid/sample1.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/cnoid/sample2.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」から JVRC モデルファイル用のプロジェク "
#~ "トファイルを読み込みます。プロジェクトファイル名は「モデルファイルのインス "
#~ "トール」でダウンロードしたリポジトリの「samples/cnoid/sample2.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウン "
#~ "ロードしたリポジトリの「samples/cnoid/sample3.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/samples/sample1.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」からJVRCモデルファイル用のプロジェクトファイルを読み込みます。プロジェクトファイル名は「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/samples/sample1.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/samples/sample2.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」から JVRC モデルファイル用のプロジェク "
#~ "トファイルを読み込みます。プロジェクトファイル名は「モデルファイルのインス "
#~ "トール」でダウンロードしたリポジトリの「model/robot/samples/sample2.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウン "
#~ "ロードしたリポジトリの「model/robot/samples/sample3.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "onActivated() のときの処理に注目しましょう。この関数はRTCが有効化された際に一度だけ呼ばれます。 "
#~ "ここで、Choreonoidの共有ディレクトリからRobotPattern.yamlを読み出しています。 "
#~ "これは制御の際の基準となるフレームファイルです。 `motion.loadStandardYAMLformat()` "
#~ "によりモーションデータに変換します。 onActivated()では初期値の設定も行っています。"
#~ msgstr ""

#~ msgid "シミュレーションの設定"
#~ msgstr ""

#~ msgid ""
#~ "Choreonoidにおけるシミュレーションの初期実行間隔は10msとあまりに粗く、今回のロボットの制御には向いていません。 "
#~ "シミュレーションの実行間隔を細かくすることで、 この作業はモーションを生成する前に行う必要があります。"
#~ msgstr ""

#~ msgid "pgain, dgain の調整について"
#~ msgstr ""

#~ msgid ""
#~ "ポーズを決めてモーションを生成し、コントローラで読み込んでシミュレーションさせたとしても、うまくロボットは制御できません。 "
#~ "制御がないとロボットは崩れてしまい、制御をやりすぎるとロボットはどこかへ飛んでいってしまいます。 そのため、各関節のpgain, "
#~ "dgainを細かく調整する必要があります。"
#~ msgstr ""

#~ msgid ""
#~ "制御の簡単な方針として、シミュレーション中にトルクや dq の値を表示させ、明らかに変化が激しくなっている関節角度のpgainを増加させます。 "
#~ "またはシミュレーションの描画中に不安定になっている関節の関節番号を確認し、その関節角度のpgainを増加させます。 dgain "
#~ "は少し値を変えただけでロボットが飛んでいくほど影響が大きいので、値の調整は難しいです。"
#~ msgstr ""

#~ msgid ""
#~ "そのまま「メニュー」の「ファイル」「読み込み」より「OpenHRPモデルファイル」を選択し、JVRCモデルファイルを読み込みます。ファイル名は「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/robot.yaml」です。"
#~ msgstr ""

#~ msgid ""
#~ "モデルを読み込んだだけではロボットは表示されません。 「アイテム」と書かれたリストのJVRCにチェックを入れてください。 "
#~ "すると、以下のようにロボットが表示されるはずです。"
#~ msgstr ""

#~ msgid "これは全く制御をしていないためです。 これからロボットを制御するプログラムを記述し、ロボットが崩れ落ちないようにしていきます。"
#~ msgstr ""

#~ msgid "本ドキュメントではサンプルシミュレーションの実行方法について解説します。"
#~ msgstr ""

#~ msgid "本ドキュメントではJVRCモデルファイルを用いた基本的なシミュレーションの実行方法について解説します。"
#~ msgstr ""

#~ msgid ""
#~ "シミュレーションツールバーの「シミュレーション開始ボタン」を押します。 "
#~ "シミュレーションを実行すると今度はなかなかロボットが崩れ落ちず、シミュレーション時間で4秒間の間立ったままの状態になったはずです。"
#~ msgstr ""
